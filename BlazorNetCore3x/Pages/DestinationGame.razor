@page "/"
@inject IJSRuntime JSRuntime
@using Model;
@using Data;

    <div class="container">
        <div class="row">
            <div class="col-md-12 text-center">
                <h3 id="gameTitle">Name the Famous Destination</h3>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12" style=""><img class="d-block mx-auto img-thumbnail" src=@_currentDestination.LocationImage></div>
        </div>
        <div class="row text-center">
            <div class="col-md-3">&nbsp;</div>
            <div class="col-md-6 mt-4" style="">
                <div class="btn-group btn-group-vertical text-center w-100">
                    <button type="button" class="btn btn-primary mb-2 rounded" onclick="@(e => CheckAnswer(e, _answers[0]))">@_answers[0]</button>
                    <button type="button" class="btn btn-primary mb-2 rounded" onclick="@(e => CheckAnswer(e, _answers[1]))">@_answers[1]</button>
                    <button type="button" class="btn btn-primary mb-2 rounded" onclick="@(e => CheckAnswer(e, _answers[2]))">@_answers[2]</button>
                </div>
            <div class="col-md-3">&nbsp;</div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">&nbsp;</div>
            <div class="col-md-6">
                <p id="gameScore">Your score is: @_score</p>
            </div>
            <div class="col-md-3">&nbsp;</div>
        </div>
        <div class="row text-center">
            <div class="col-md-3">&nbsp;</div>
            <div class="col-md-6 mt-2" style="">
                <div class="btn-group btn-group-vertical text-center btn-group-lg w-100">
                    <button type="button" class="btn btn-secondary mb-2 rounded" onclick="@StartGame">Start Over</button>
                </div>
                <div class="col-md-3">&nbsp;</div>
            </div>
        </div>
    </div>

@functions {
    List<Destination> _destinationsList = new List<Destination>();
    List<string> _answers = new List<string>();
    Destination _currentDestination = null;
    int _destinationCount = 0;
    int _score = 0;


    protected override void OnInit()
    {
        StartGame();
    }

    protected int GetRandomNumber()
    {
        Random rand = new Random();
        return rand.Next(0, 3);
    }

    protected void ShuffleAnswers()
    {
        _answers.Clear();
        _answers.Add(_currentDestination.WrongAnswer1);
        _answers.Add(_currentDestination.WrongAnswer2);
        _answers.Insert(GetRandomNumber(), _currentDestination.LocationDescription);
    }

    protected void CheckAnswer(UIMouseEventArgs args, string answer)
    {
        if (answer == _currentDestination.LocationDescription)
        {
            NotifyUser(1);
            _score += 5;
        }
        else
        {
            NotifyUser(2);
        }

        _destinationCount++;

        if (_destinationCount <= _destinationsList.Count - 1)
        {
            _currentDestination = _destinationsList[_destinationCount];
            ShuffleAnswers();

        }
        else
        {
            NotifyUser(3);
            StartGame();
        }
    }

    public async void NotifyUser(int action)
    {
        if (action == 1)
        {
            await JSRuntime.InvokeAsync<string>(
                    "JsFunctions.alertifyNotificationSuccess",
                    "Correct! The location is " + @_currentDestination.LocationDescription + ", which is located in " + @_currentDestination.Location);
        }
        else if (action == 2)
        {
            await JSRuntime.InvokeAsync<string>(
                "JsFunctions.alertifyNotificationError",
                "Sorry! The location is " + @_currentDestination.LocationDescription + ", which is located in " + @_currentDestination.Location);
        }
        else if (action == 3)
        {
            await JSRuntime.InvokeAsync<string>(
                  "JsFunctions.alertifyConfirmGameOver",
                  _score);

        }
    }

    public void StartGame()
    {
        Destinations destinations = new Destinations(out List<Destination> destinationsList);
        _destinationsList = destinationsList;
        _destinationCount = 0;
        _score = 0;
        _currentDestination = _destinationsList[_destinationCount];
        ShuffleAnswers();
    }

}
